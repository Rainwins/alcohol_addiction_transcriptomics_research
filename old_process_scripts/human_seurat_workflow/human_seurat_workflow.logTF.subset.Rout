
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyr)
> library(Seurat)
Loading required package: SeuratObject
Loading required package: sp

Attaching package: ‘SeuratObject’

The following objects are masked from ‘package:base’:

    intersect, t

> library(SeuratObject)
> library(future)
> 
> #setting new global max size for memory to 50GiB:
> plan(multisession, workers = 4)
> options(future.globals.maxSize = 200 * 1024^3) 
> 
> #Loading in the Seurat Object:
> load("/stor/work/FRI-BigDataBio/alcohol_addiction_transcriptomics/human_seurat_workflow/seurat.merged_v4.Rdata")
> 
> #data normalization
> 
> #human.combined <- NormalizeData(human.combined)
> #human.combined <- ScaleData(human.combined)
> 
> #getting the metadata into frame:
> #human_meta_data <- human.combined@meta.data
> 
> #human_meta_data$cell_names <- rownames(human_meta_data)
> 
> # Split the cell_names column into 'sample_id' and 'cell_barcode'
> #human_meta_data <- separate(human_meta_data, cell_names, into = c("sample_id", "cell_barcode"), sep = "_")
> 
> #human.combined@meta.data <- human_meta_data
> 
> #changing rownames in meta.data
> 
> cell_meta_rownames <- Cells(human.combined) #character class type
> 
> #assign this vector as rownames
> rownames(human.combined@meta.data) <- cell_meta_rownames
> 
> ####NORMALIZATION
> 
> #filtering out missing genes:
> # Step 1: Check for feature names in the Seurat object
> #head(rownames(human.combined))
> 
> # Step 2: Convert gene lists to uppercase if needed (adjust as necessary)
> #s.genes <- toupper(cc.genes$s.genes)
> #g2m.genes <- toupper(cc.genes$g2m.genes)
> 
> #s.genes <- s.genes[s.genes %in% rownames(human.combined)]
> #g2m.genes <- g2m.genes[g2m.genes %in% rownames(human.combined)]
> 
> #s.genes <- cc.genes$s.genes
> #g2m.genes <- cc.genes$g2m.genes
> #human.combined <- CellCycleScoring(human.combined, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
> #human.combined$CC.Difference <- human.combined$S.Score - human.combined$G2M.Score
> 
> #human.combined <- SCTransform(human.combined, vars.to.regress = "CC.Difference", ncells = 1000, variable.features.n = 1500)
> human.combined <- NormalizeData(
+     human.combined,
+     assay = NULL,
+     normalization.method = "LogNormalize",
+     scale.factor = 10000,
+     margin = 1,
+     verbose = TRUE
+   )
> 
> save.image("seurat.merged.LogNorm.Rdata")
> 
> #load("seurat.merged.SCTransform.Rdata")
> 
> #####IDENTIFY HIGHLY VARIABLE FEATURES:
> human.combined <- FindVariableFeatures(human.combined, selection.method = "vst", nfeatures = 2000)
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**********************************************Computing corrected count matrix for 43551 genes
Error: cannot allocate vector of size 96.1 Gb
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Execution halted
 repel = TRUE)
When using repel, set xnudge and ynudge to 0 for optimal results
> CombinePlots(plots = list(plot1, plot2))
Warning messages:
1: CombinePlots is being deprecated. Plots should now be combined using the patchwork system. 
2: In scale_x_log10() : log-10 transformation introduced infinite values.
3: In scale_x_log10() : log-10 transformation introduced infinite values.
> dev.off()
null device 
          1 
> 
> ###Scaling the data:
> all.genes <- rownames(human.combined)
> human.combined <- ScaleData(human.combined, features = VariableFeatures(object = human.combined))
Centering and scaling data matrix
> 
> #PCA for dimensionality reduction:
> #Perform PCA for Dimensionality Reduction
> human.combined <- RunPCA(human.combined, features = VariableFeatures(object = human.combined))
PC_ 1 
Positive:  NEAT1, SLC1A3, EPAS1, IGFBP7, ATP1A2, PREX2, PARD3B, FBXL7, CGNL1, EBF1 
	   FLT1, PARD3, TNS1, PON2, EPS8, PDLIM5, ATP10A, GLUL, ZFP36L1, MT2A 
	   PTN, YAP1, XAF1, MT-RNR2, CLDN5, UACA, ITIH5, MECOM, MAML2, HIF3A 
Negative:  LINC01250, ST6GALNAC5, KCNB2, KCNH7, SLC35F3, FSTL4, SYN3, OLFM3, MLIP, MIR137HG 
	   LY86-AS1, AC019211.1, CDH12, AC067956.1, AC107223.1, SORCS1, NRG1, AC011287.1, MCTP1, TAFA1 
	   AL591501.1, AC007368.1, AL117329.1, GRM1, AC110296.1, ZNF804B, PTPRT, NWD2, GALNTL6, AC034268.2 
PC_ 2 
Positive:  ST18, MOBP, C10orf90, KCNH8, ENPP2, RNF220, PLP1, TMEM144, UGT8, FRMD4B 
	   TF, CTNNA3, DOCK5, BCAS1, LINC01608, LPAR1, LINC00639, AC008571.2, FOLH1, ANLN 
	   PIEZO2, SH3TC2, LINC00609, CNDP1, AC012494.1, COL4A5, ABCA8, PCSK6, AL033523.1, ASPA 
Negative:  COBLL1, PTPRB, ABCB1, ATP10A, UTRN, EPAS1, ARHGAP29, ARL15, THSD4, FLT1 
	   PLCB4, EBF1, LEF1, TBC1D4, CADPS2, MECOM, CRIM1, LHFPL6, TIMP3, ADAMTS9-AS2 
	   ITIH5, ERG, PRKCH, ADGRF5, SYNE2, PDE7B, PODXL, CLDN5, ST8SIA6, NXN 
PC_ 3 
Positive:  ATP10A, FLT1, ABCB1, MECOM, LEF1, ABCG2, CLDN5, FLI1, COBLL1, PRKCH 
	   VWF, HERC2P3, ELOVL7, EBF1, A2M, ST8SIA6, ADGRF5, ERG, PODXL, ITIH5 
	   EMCN, PECAM1, SLC7A5, ENG, ANO2, TIE1, ITM2A, SLCO2B1, BTNL9, ITGA1 
Negative:  OBI1-AS1, ADGRV1, NKAIN3, LINC00299, SLC1A2, RFX4, AC002429.2, LINC00499, ATP13A4, AL137139.2 
	   BMPR1B, ZNF98, RGS20, GPC5, PAMR1, SLC4A4, SPON1, HPSE2, STON2, SLC25A18 
	   RYR3, GLI3, SLC14A1, NHSL1, SLCO1C1, AC114971.1, ALDH1L1, CABLES1, COL5A3, TPD52L1 
PC_ 4 
Positive:  NXPH1, GRIK1, ZNF385D, CRACD, DLX6-AS1, ADARB2, GRIP1, BTBD11, GAD1, SLC24A3 
	   ERBB4, VWC2, ALK, ANK1, KCNIP1, GRIP2, PLD5, SLC35F4, GAD2, MYO16 
	   PCDH15, LHFPL3, ANKRD55, SGCZ, UBASH3B, TENM1, NHS, TOX3, KIF26B, LUZP2 
Negative:  CBLN2, AC011287.1, LY86-AS1, MLIP, TESPA1, NRGN, AL117329.1, AC067956.1, AL157944.1, AC019211.1 
	   AC034268.2, LINC01378, TAFA1, SHROOM3, ANO3, LINC02306, RORB, AC013287.1, LINC02822, AC008574.1 
	   CR589904.2, LINC00507, AJ009632.2, PART1, MCHR2, ADAMTS3, ADGRV1, CADPS2, AQP4-AS1, LINC01331 
PC_ 5 
Positive:  CTNNA3, C10orf90, ST18, RNF220, SHROOM4, DOCK5, KCNH8, ENPP2, PCSK6, TMEM144 
	   MOBP, SLCO1A2, LINC00609, DAAM2, UGT8, COL4A5, DLC1, TF, PRR5L, BCAS1 
	   AL033523.1, AC008571.2, LINC00639, ABCA8, ATP10B, SH3TC2, AC012494.1, LINC01608, FOLH1, ANLN 
Negative:  APBB1IP, DOCK8, ADAM28, TBXAS1, FYB1, CSF1R, SYK, BLNK, C3, LNCAROD 
	   IKZF1, LINC01374, LINC02712, PIK3R5, RHBDF2, AC008691.1, CX3CR1, AL392172.2, P2RY12, RBM47 
	   SAMSN1, MT-RNR2, RUNX1, WDFY4, ARHGAP15, AL357522.1, CD86, MT-CO1, MT-RNR1, ARHGAP24 
> 
> #Print and Examine PCA Results in Multiple Formats
> pdf("findDimensions.pdf")
> print(human.combined[["pca"]], dims = 1:5, nfeatures = 5)
PC_ 1 
Positive:  NEAT1, SLC1A3, EPAS1, IGFBP7, ATP1A2 
Negative:  LINC01250, ST6GALNAC5, KCNB2, KCNH7, SLC35F3 
PC_ 2 
Positive:  ST18, MOBP, C10orf90, KCNH8, ENPP2 
Negative:  COBLL1, PTPRB, ABCB1, ATP10A, UTRN 
PC_ 3 
Positive:  ATP10A, FLT1, ABCB1, MECOM, LEF1 
Negative:  OBI1-AS1, ADGRV1, NKAIN3, LINC00299, SLC1A2 
PC_ 4 
Positive:  NXPH1, GRIK1, ZNF385D, CRACD, DLX6-AS1 
Negative:  CBLN2, AC011287.1, LY86-AS1, MLIP, TESPA1 
PC_ 5 
Positive:  CTNNA3, C10orf90, ST18, RNF220, SHROOM4 
Negative:  APBB1IP, DOCK8, ADAM28, TBXAS1, FYB1 
> VizDimLoadings(human.combined, dims = 1:2, reduction = "pca")
> DimPlot(human.combined, reduction = "pca")
Rasterizing points since number of points exceeds 100,000.
To disable this behavior set `raster=FALSE`
> 
> #Generate Principal Component Heatmaps through PC_30
> DimHeatmap(human.combined, dims = 1, cells = 500, balanced = TRUE)
> DimHeatmap(human.combined, dims = 1:15, cells = 500, balanced = TRUE)
> DimHeatmap(human.combined, dims = 16:30, cells = 500, balanced = TRUE)
> 
> #Create Elbow Plot of Principal Components through PC_30
> ElbowPlot(human.combined, ndims = 30, reduction = "pca")
> dev.off()
null device 
          1 
> 
> #Cluster the Cells for the selected numeber of Principal Components
> human.combined <- FindNeighbors(human.combined, dims = 1:14)
Computing nearest neighbor graph
Computing SNN
> human.combined <- FindClusters(human.combined, resolution = 0.5)
Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck

Number of nodes: 296130
Number of edges: 8845946

Running Louvain algorithm...
Maximum modularity in 10 random starts: 0.9503
Number of communities: 36
Elapsed time: 196 seconds
> 
> #View the Cluster IDs of the First 5 Cells
> head(Idents(human.combined), 5)
a1_AAACCCACAACAGCTT-1 a1_AAACCCACACAGCGCT-1 a1_AAACCCACACCTGCAG-1 
                    4                    17                     1 
a1_AAACCCACACTGCTTC-1 a1_AAACCCACAGAGATGC-1 
                    8                    11 
36 Levels: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ... 35
> 
> #Visualizing using TSNE
> pdf("tsne.pdf")
> human.combined <- RunTSNE(human.combined, dims = 1:14)
> DimPlot(human.combined, reduction = "tsne")
Rasterizing points since number of points exceeds 100,000.
To disable this behavior set `raster=FALSE`
> dev.off()
null device 
          1 
> 
> save.image("seurat.merged.SCTransform.Clustered.RData")
> 
> proc.time()
    user   system  elapsed 
5813.754  571.498 9884.013 
